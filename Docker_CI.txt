도커를 사용하는 이유
다양한 OS의 버전이나 환경으로인해 원하는 프로그램을 installer를 통해서 다운로드할 때 오류가 자주 발생함
=> 도커를 사용하면 바로 오류 없이 다운 받을 수 있음

도커란?
컨테이너를 사용하여 응용프로그램을 더 쉽게 만들고 배포하고 실행할 수 있도록 설계된 도구이며 컨테이너 기반의 오픈소스
가상화 플랫폼 생태계
=> 말그대로 원하는 프로그램들을 컨테이너로 추상화해서 프로그램을 손쉽게 이동 배포 관리해주는 것

도커 이미지는 프로그램을 실행하는데 필요한 설정이나 종속성을 갖고 있는 것
도커 이미지를 이용해서 컨테이너를 생성함 (도커 컨테이너 == 도커 이미지의 인스턴스)
이미지 => 컨테이너 => 컨테이너를 이용해서 프로그램을 실행함



이미지 파일안에는 시작시 실행 될 명령어 + 파일 스냅샷이 들어있음
docker run 이미지 ls
=> 파일 스냅샷이 컨테이너의 하드디스크로 들어오고 시작시 실행 될 명령어가 실행중인 프로세스에 들어가서 명령을 수행함

docker ps

생명주기 ~ kill전까지(강의록 참고)
-a 옵션은 앞부분만 써도 가능
docker start -a id 일부

stop / kill
stop은 gracefully하게 중지
kill은 바로 중지

docker system prune
현재 사용하지 않는 도커 삭제

실행중인 컨테이너에 명령어 전달
docker exec <컨테이너 명> <명령어>

-it 옵션
=> exec로 컨테이너 안으로 들어가서 추가 명령어를 작성할 때 계속해서 명령어를 사용할 수 있게 해주는 옵션
interactive terminal

-it를 붙여주지 않으면 들어갔다가 바로 나와버림 -> 꼭 -it 옵션을 써줄것

실행중인 컨테이너에 명령을 하기 위해서 그러면 위 처럼 귀찮은 방법을 계속 써야하는가?
=> NO!
sh명령어를 통해서 아예 해당 컨테이너 안으로 들어가서 그 안에서 명령어만 계속 작성할 수 있음
docker run -it <이미지 이름> sh => /# 으로 바뀌면서 해당 컨테이너 안으로 들어감
나올때는 ctrl + D












